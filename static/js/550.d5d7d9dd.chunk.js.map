{"version":3,"file":"static/js/550.d5d7d9dd.chunk.js","mappings":"wMAEaA,EAAWC,EAAAA,EAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,0GASrBC,EAAmBH,EAAAA,EAAAA,IAAUI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,6F,SCR7BG,EAAS,WACpB,OACEC,EAAAA,EAAAA,KAACP,EAAQ,CAAAQ,UACLD,EAAAA,EAAAA,KAACH,EAAgB,CAAAI,UACnBD,EAAAA,EAAAA,KAACE,EAAAA,GAAY,CACXC,OAAQ,IACRC,MAAO,IACPC,OAAQ,EACRC,MAAM,UACNC,UAAU,wBACVC,aAAc,CAAC,EACfC,aAAa,GACbC,SAAS,OAKjB,C,wGCuCA,UAtDe,WAAO,IAADC,EACnBC,GAAsCC,EAAAA,EAAAA,MAAiBC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAhDI,EAAWF,EAAA,GAAEG,EAAcH,EAAA,GAClCI,GAA4BC,EAAAA,EAAAA,UAAS,IAAGC,GAAAL,EAAAA,EAAAA,GAAAG,EAAA,GAAjCG,EAAMD,EAAA,GAAEE,EAASF,EAAA,GACxBG,GAAkCJ,EAAAA,EAAAA,WAAS,GAAMK,GAAAT,EAAAA,EAAAA,GAAAQ,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAC9BG,GAA0BR,EAAAA,EAAAA,UAAS,MAAKS,GAAAb,EAAAA,EAAAA,GAAAY,EAAA,GAAjCE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GAChBG,EAAwC,QAA/BpB,EAAGK,EAAYgB,IAAI,oBAAY,IAAArB,EAAAA,EAAI,IAElDsB,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAU,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAH,EAAAA,EAAAA,KAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEI,OAFJF,EAAAC,KAAA,EAEfjB,GAAa,GAAMgB,EAAAE,KAAA,GACAC,EAAAA,EAAAA,IAASd,GAAW,KAAD,EAAhCS,EAAIE,EAAAI,KACVxB,EAAUkB,EAAKO,SAASL,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAM,GAAAN,EAAA,SAExBZ,EAASY,EAAAM,GAAMC,SAAS,QAEJ,OAFIP,EAAAC,KAAA,GAExBjB,GAAa,GAAOgB,EAAAQ,OAAA,6BAAAR,EAAAS,OAAA,GAAAZ,EAAA,wBAEvB,kBAVe,OAAAJ,EAAAiB,MAAA,KAAAC,UAAA,KAYhBnB,GACF,GAAG,CAACH,IAUJ,OACEuB,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAtD,SAAA,CACG4B,IAASyB,EAAAA,EAAAA,MAAA,KAAArD,SAAA,CAAG,SAAO8B,EAAU,gBAC7BN,IAAazB,EAAAA,EAAAA,KAACD,EAAAA,EAAM,KACrBuD,EAAAA,EAAAA,MAAA,QAAArD,SAAA,EACED,EAAAA,EAAAA,KAAA,SACEwD,KAAK,OACLC,MAAO1B,EACP2B,SAhBa,SAAAC,GACnB,IAAMC,EAAiBD,EAAIE,OAAOJ,MAClC,GAAuB,KAAnBG,EACF,OAAO3C,EAAe,CAAC,GAEzBA,EAAe,CAAEc,UAAW6B,GAC9B,KAWM5D,EAAAA,EAAAA,KAAA,SAAAC,SAAO,oBAGRoB,EAAOyC,KAAI,SAAAC,GAAK,OACf/D,EAAAA,EAAAA,KAAA,MAAAC,UACED,EAAAA,EAAAA,KAACgE,EAAAA,GAAI,CAACC,GAAE,WAAAC,OAAaH,EAAMI,IAAMC,MAAO,CAAC,EAAEnE,SACxC8D,EAAMM,SAFFN,EAAMI,GAIV,MAIb,C","sources":["components/Loader/Loader.styled.jsx","components/Loader/Loader.jsx","components/Pages/Movies/Movies.jsx"],"sourcesContent":["import styled from \"@emotion/styled\";\n\nexport const Backdrop = styled.div`\nposition: fixed;\ntop:0;\nleft:0;\nright:0;\nbottom:0;\nbackground-color: rgba(36,36,36, 0.5);\n`\n\nexport const WrapperForLoader = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\ntransform: translate(-50%,-50%)\n`;","import { BallTriangle } from 'react-loader-spinner';\nimport { Backdrop, WrapperForLoader } from \"./Loader.styled\"\n\nexport const Loader = () => {\n  return (\n    <Backdrop>\n        <WrapperForLoader>\n      <BallTriangle\n        height={100}\n        width={100}\n        radius={5}\n        color=\"#6c4da9\"\n        ariaLabel=\"ball-triangle-loading\"\n        wrapperClass={{}}\n        wrapperStyle=\"\"\n        visible={true}\n      />\n      </WrapperForLoader>\n    </Backdrop>\n  );\n};","import React, { useEffect, useState } from 'react';\nimport { Link, useSearchParams } from 'react-router-dom';\nimport { getMovie } from 'components/Api/Api';\nimport { Loader } from 'components/Loader/Loader';\n\nconst Movies = () => {\n  const [searchMovie, setSearchMovie] = useSearchParams();\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const movieName = searchMovie.get('movieName') ?? '';\n\n  useEffect(() => {\n    const fetchMovie = async () => {\n      try {\n        setIsLoading(true);\n        const data = await getMovie(movieName);\n        setMovies(data.results);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchMovie();\n  }, [movieName]);\n\n  const handleSearch = evt => {\n    const movieNameValue = evt.target.value;\n    if (movieNameValue === '') {\n      return setSearchMovie({});\n    }\n    setSearchMovie({ movieName: movieNameValue });\n  };\n\n  return (\n    <>\n      {error && <p>Movie {movieName} not found</p>}\n      {isLoading && <Loader />}\n      <form>\n        <input \n          type=\"text\" \n          value={movieName}\n          onChange={handleSearch} />\n        <label>Movie search</label>\n      </form>\n\n      {movies.map(movie => (\n        <li key={movie.id}>\n          <Link to={`/movies/${movie.id}`} state={{}}>\n            {movie.title}\n          </Link>\n        </li>\n      ))}\n    </>\n  );\n};\n\nexport default Movies;\n\n\n// import { useEffect, useState } from 'react';\n// import { Link, useSearchParams } from 'react-router-dom';\n// import { getMovie } from 'components/Api/Api';\n// import { Loader } from 'components/Loader/Loader';\n\n// const Movies = () => {\n//   const [searchMovie, setSearchMovie] = useSearchParams();\n//   const [movies, setMovies] = useState([]);\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [error, setError] = useState(null);\n//   const movieName = searchMovie.get('movieName') ?? '';\n\n//   useEffect(() => {\n//     const fetchMovie = async () => {\n//       try {\n//         setIsLoading(true);\n//         const data = await getMovie(movieName);\n//         setMovies(data.results);\n//       } catch (error) {\n//         setError(error.message);\n//       } finally {\n//         setIsLoading(false);\n//       }\n//     };\n\n//     fetchMovie();\n//   }, [movieName]);\n\n//   const handleSearch = evt => {\n//     const movieNameValue = evt.target.value;\n//     if (movieNameValue === '') {\n//       return setSearchMovie({});\n//     }\n//     setSearchMovie({ movieName: movieNameValue });\n//   };\n\n//   return (\n//     <>\n//       {error && <p>Movie {movieName} not found</p>}\n//       {isLoading && <Loader />}\n//       <form>\n//         <input \n//         type=\"text\" \n//         value={movieName}\n//         onChange={handleSearch} />\n//         <label>Movie search</label>\n//       </form>\n\n//       {movies.map(movie => (\n//         <li key={movie.id}>\n//           <Link to={`${movie.id}`} state={{}}>\n//             {movie.title}\n//           </Link>\n//         </li>\n//       ))}\n//     </>\n//   );\n// };\n\n// export default Movies;\n\n\n\n\n\n\n\n"],"names":["Backdrop","styled","_templateObject","_taggedTemplateLiteral","WrapperForLoader","_templateObject2","Loader","_jsx","children","BallTriangle","height","width","radius","color","ariaLabel","wrapperClass","wrapperStyle","visible","_searchMovie$get","_useSearchParams","useSearchParams","_useSearchParams2","_slicedToArray","searchMovie","setSearchMovie","_useState","useState","_useState2","movies","setMovies","_useState3","_useState4","isLoading","setIsLoading","_useState5","_useState6","error","setError","movieName","get","useEffect","fetchMovie","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","data","wrap","_context","prev","next","getMovie","sent","results","t0","message","finish","stop","apply","arguments","_jsxs","_Fragment","type","value","onChange","evt","movieNameValue","target","map","movie","Link","to","concat","id","state","title"],"sourceRoot":""}